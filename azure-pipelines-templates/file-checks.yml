# Copyright (c) .NET Foundation and Contributors
# See LICENSE file in the project root for full license information.

steps:

  - task: PowerShell@2
    condition: >-
      and(
        succeeded(),
        eq(variables['StartReleaseCandidate'], false),
        not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
      )
    displayName: File checks
    inputs:
      targetType: 'inline'
      script: |

        $checksFailed = $false

        # compute authorization header in format "AUTHORIZATION: basic 'encoded token'"
        # 'encoded token' is the Base64 of the string "nfbot:personal-token"
        $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$(GitHubToken)")))"

        if($env:System_PullRequest_PullRequestId -ne $null)
        {
            # get files changed in PR, if this is a PR
            $commit = Invoke-RestMethod -Uri "https://api.github.com/repos/$env:Build_Repository_Name/pulls/$env:System_PullRequest_PullRequestNumber/files" -Header @{"Authorization"="$auth"} -ContentType "application/json" -Method GET

            # filter removed files              
            $files = $commit.where{$_.status -ne 'removed'}

            # get file names only
            $files = $files | % {$_.filename}

            ############################
            # check for app.config files
            $appConfigFiles = ($files.where{$_.EndsWith('app.config')})

            if($appConfigFiles.Count)
            {
                "Found app.config file(s) in the project(s)" | Write-Host -ForegroundColor Red
                $appConfigFiles | Write-Host

                $checksFailed = $true
            }
        }

        # global check for checks failure
        if($checksFailed)
        {
            exit 1
        }
