# Copyright (c) .NET Foundation and Contributors
# Portions Copyright (c) Sankarsan Kampa (a.k.a. k3rn31p4nic).  All rights reserved.
# See LICENSE file in the project root for full license information.

parameters:
  - name: skipNuGetRestore
    type: boolean
    default: false
  - name: skipNuGetCache
    type: boolean
    default: false
  - name: gitUser
    type: string
    default: nfbot
  - name: gitEmail
    type: string
    default: nanoframework@outlook.com
  - name: sonarCloudProject
    type: string
    default: dummy-key
  - name: nugetConfigPath
    type: string
    default: ''
  - name: msbuildExtraParams
    type: string
    default: ' '
  - name: runUnitTests
    type: boolean
    default: false
  - name: unitTestRunsettings
    type: string
    default: '$(System.DefaultWorkingDirectory)\.runsettings'

steps:
# need this here in order to persist GitHub credentials 
- checkout: self
  submodules: true

- script: |
    git config --global user.email ${{ parameters.gitEmail }}
    git config --global user.name ${{ parameters.gitUser }}
    git config --global core.autocrlf true
  displayName: Setup git identity

# get commit message
- template: get-commit-details.yml

- template: file-checks.yml

- template: install-nbgv-tool.yml

- template: prepare-release.yml

- task: SonarCloudPrepare@1
  condition: >-
    and(
      succeeded(),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  displayName: 'Prepare analysis on SonarCloud'
  inputs:
    SonarCloud: 'sonarcloud-$(System.TeamProject)'
    organization: 'nanoframework'
    scannerMode: 'MSBuild'
    projectKey: '${{ parameters.sonarCloudProject }}'
    extraProperties: |
      sonar.exclusions=**/obj/**,**/*.dll
      sonar.cs.vscoveragexml.reportsPaths=$(Agent.TempDirectory)/**/**.coverage
      sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/**/**.trx

- task: InstallNanoMSBuildComponents@1
  condition: >-
    and(
      succeeded(),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  displayName: Install .NET nanoFramework MSBuild components
  inputs:
    GitHubToken: $(GitHubToken)

- template: install-nuget.yml
- template: cache-nano-nugets.yml
  parameters:
    skipNuGetCache: ${{ parameters.skipNuGetCache }}

- task: NuGetCommand@2
  condition: >-
    and(
      succeeded(),
      not(${{ parameters.skipNuGetRestore }}),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  displayName: NuGet restore
  retryCountOnTaskFailure: 5
  inputs:
    restoreSolution: '**/*.sln'
    ${{ if eq(parameters.nugetConfigPath, '') }}:
      feedsToUse: select
    ${{ else }}:
      feedsToUse: config
    nugetConfigPath: ${{ parameters.nugetConfigPath }}

- template: versions-check.yml

- task: VSBuild@1
  condition: >-
    and(
      succeeded(),
      eq(variables['StartReleaseCandidate'],false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    msbuildArgs: '/p:PublicRelease=true ${{ parameters.msbuildExtraParams }}'
    configuration: '$(buildConfiguration)'
    msbuildArchitecture: 'x64'
    maximumCpuCount: true

- template: run-unit-tests.yml
  parameters:
    runUnitTests: '${{ parameters.runUnitTests }}'
    unitTestRunsettings: '${{ parameters.unitTestRunsettings }}'

- template: get-assembly-native-version.yml

- powershell: |
    # get subject and commit message for commit
    $commitMessage = git log --format='%B' -1

    # need to flatten message by removing new lines
    $commitMessage = $commitMessage -replace "`r`n", " "

    if($commitMessage -like "*PUBLISH_RELEASE*")
    {
      # set variable
      Write-Host "$("##vso[task.setvariable variable=RELEASE_VERSION;isOutput=true]")true"
      Write-Host "Release draft: FALSE"
    }
    else
    {
      # set variable
      Write-Host "$("##vso[task.setvariable variable=RELEASE_VERSION;isOutput=true]")false"
      Write-Host "Release draft: TRUE"
    }
  name: SetReleaseDraftVar
  condition: >-
    and(
      succeeded(),
      eq(variables['StartReleaseCandidate'], false)
    )
  displayName: Set release draft var

- task: SonarCloudAnalyze@1
  condition: >-
    and(
      succeeded(),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  displayName: 'Run Code Analysis'
  continueOnError: true

- task: SonarCloudPublish@1
  condition: >-
    and(
      succeeded(),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  displayName: 'Publish Quality Gate Result'
  continueOnError: true

- task: UseRubyVersion@0
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      eq(variables['StartReleaseCandidate'], false)
    )
  displayName: Setup Ruby
  inputs:
    versionSpec: '= 3.0' 
    addToPath: true

# generate change log
- powershell: |
    gem install github_changelog_generator --quiet --no-document
    # need to call it passing both cache options with full path otherwise it won't work
    github_changelog_generator --token $(GitHubToken) --cache-log  $env:AGENT_TEMPDIRECTORY\github-changelog-logger.log --cache-file $env:AGENT_TEMPDIRECTORY\github-changelog-http-cache --pr-wo-labels
  condition: >-
    and(
      succeeded(),
      or(
        eq(variables['SetReleaseDraftVar.RELEASE_VERSION'], 'True'),
        and(
          eq(variables['System.PullRequest.PullRequestId'], ''),
          not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v')),
          startsWith(variables['Build.SourceBranchName'], 'main'),
          not(contains(variables['Build.SourceBranchName'], 'update-dependencies'))
        )
      ),
      eq(variables['StartReleaseCandidate'], false)
    )
  displayName: Generate change log
  continueOnError: true

# copy change log to artifacts directory
- task: CopyFiles@2
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      not(contains(variables['Build.SourceBranchName'], 'update-dependencies')),
      eq(variables['StartReleaseCandidate'], false)
    )
  displayName: Copy Changelog
  continueOnError: true
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: 'CHANGELOG.md'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

# push new changelog to GitHub repo
- task: PowerShell@2
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v')),
      not(contains(variables['Build.SourceBranchName'], 'update-dependencies')),
      eq(variables['StartReleaseCandidate'], false)
    )
  displayName: Push changelog to GitHub
  continueOnError: true
  inputs:
    targetType: 'inline'
    script: |
      git add CHANGELOG.md
      git commit -m "Update CHANGELOG for v$(MY_NUGET_VERSION)" -m"***NO_CI***"

      git config user.email ${{ parameters.gitEmail }}
      git config user.name ${{ parameters.gitUser }}
      
      # compute authorization header in format "AUTHORIZATION: basic 'encoded token'"
      # 'encoded token' is the Base64 of the string "nfbot:personal-token"
      $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$(GitHubToken)")))"

      git -c http.extraheader="AUTHORIZATION: $auth" push origin "HEAD:$(Build.SourceBranchName)"

- task: NuGetCommand@2
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  displayName: Pack NuGet with class library
  inputs:
    command: 'custom' 
    arguments: 'pack $(nugetPackageName).nuspec -Version $(MY_NUGET_VERSION) -Symbols -SymbolPackageFormat snupkg -properties nativeVersion="$(NF_ASSEMBLY_NATIVE_VERSION)";commit="$(Build.SourceVersion)";checksum="$(NF_NATIVE_ASSEMBLY_CHECKSUM)"'

# - task: NuGetCommand@2
#   inputs:
#     command: 'custom' 
#     arguments: 'pack $(nugetPackageName).DELIVERABLES.nuspec -Version $(MY_NUGET_VERSION)'
#     displayName: Pack NuGet with build deliverables class library

- task: CopyFiles@1
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      eq(variables['StartReleaseCandidate'], false)
    )
  displayName: Collecting deployable artifacts
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    Contents: |
      *$(nugetPackageName)*.nupkg
      *$(nugetPackageName)*.snupkg
      CHANGELOG.md
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true

- task: PowerShell@2
  condition: >-
    and(
      succeeded(),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  displayName: Check deployable artifacts
  inputs:
    targetType: 'inline'
    script: |

      $artifacts = (Get-ChildItem -Path "$env:Build_ArtifactStagingDirectory" -Recurse)

      if ($artifacts.Count -eq 0)
      {
          Write-Error "No deployable artifacts found!"
          Exit 1
      }

- task: DotNetCoreCLI@2
  displayName: Install SignTool tool
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . SignClient

- pwsh: |
    .\SignClient "Sign" `
    --baseDirectory "$(Build.ArtifactStagingDirectory)" `
    --input "**/*.nupkg" `
    --config "$(Build.Repository.LocalPath)\config\SignClient.json" `
    --filelist "$(Build.Repository.LocalPath)\config\filelist.txt" `
    --user "$(SignClientUser)" `
    --secret '$(SignClientSecret)' `
    --name "$(nugetPackageName)" `
    --description "$(nugetPackageName)" `
    --descriptionUrl "https://github.com/$env:Build_Repository_Name"
  displayName: Sign packages
  continueOnError: true
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )

# publish artifacts (only possible if this is not a PR originated on a fork)
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifactName: deployables
    artifactType: pipeline
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      eq(variables['StartReleaseCandidate'], false)
    )
  displayName: Publish deployables artifacts

# push NuGet packages to AzureArtifacts feed (happens on every build except PRs)
- task: NuGetCommand@2
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    ) 
  continueOnError: true
  displayName: Push NuGet packages to AzureArtifacts
  inputs:
    command: push
    nuGetFeedType: external
    allowPackageConflicts: true
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    includeSymbols: true
    publishFeedCredentials: 'AzureArtifacts-$(System.TeamProject)'

# push NuGet class lib package to NuGet (happens on every build except PRs)
- task: NuGetCommand@2
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  continueOnError: true
  displayName: Push NuGet packages to NuGet
  inputs:
    command: push
    nuGetFeedType: external
    allowPackageConflicts: true
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    includeSymbols: true
    publishFeedCredentials: 'NuGet-$(System.TeamProject)'

# create GitHub release build from main branch
- task: GithubRelease@1
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/main'),
      not(contains(variables['Build.SourceBranch'], 'preview')),
      eq(variables['StartReleaseCandidate'], false)
    )
  displayName: Create/Update GitHub release
  inputs:
    action: edit
    gitHubConnection: 'github.com_nano-$(System.TeamProject)'
    tagSource: userSpecifiedTag
    tag: v$(MY_NUGET_VERSION)
    title: '$(nugetPackageName) Library v$(MY_NUGET_VERSION)'
    releaseNotesSource: inline
    releaseNotesInline: 'Check the [changelog]($(Build.Repository.Uri)/blob/$(Build.SourceBranchName)/CHANGELOG.md).<br><br><h4>Install from NuGet</h4><br>The following NuGet packages are available for download from this release:<br>:package: [.NET](https://www.nuget.org/packages/$(nugetPackageName)/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION).'
    assets: '$(Build.ArtifactStagingDirectory)/*$(nugetPackageName).$(MY_NUGET_VERSION).nupkg'
    isPreRelease: false
    addChangeLog: false
    
