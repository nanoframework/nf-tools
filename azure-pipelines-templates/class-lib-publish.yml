# Copyright (c) .NET Foundation and Contributors
# See LICENSE file in the project root for full license information.

parameters:
  - name: skipNuGetRestore
    type: boolean
    default: false
  - name: gitUser
    type: string
    default: nfbot
  - name: gitEmail
    type: string
    default: nanoframework@outlook.com 

steps:

- task: DotNetCoreCLI@2
  displayName: Install SignTool tool
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      eq( variables['StartReleaseCandidate'], false ),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . SignClient

- pwsh: |
    .\SignClient "Sign" `
    --baseDirectory "$(Build.ArtifactStagingDirectory)" `
    --input "**/*.nupkg" `
    --config "$(Build.Repository.LocalPath)\config\SignClient.json" `
    --filelist "$(Build.Repository.LocalPath)\config\filelist.txt" `
    --user "$(SignClientUser)" `
    --secret '$(SignClientSecret)' `
    --name "$(nugetPackageName)" `
    --description "$(nugetPackageName)" `
    --descriptionUrl "https://github.com/$env:Build_Repository_Name"
  displayName: Sign packages
  continueOnError: true
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      eq( variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )

# publish artifacts (only possible if this is not a PR originated on a fork)
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifactName: deployables
    artifactType: pipeline
  condition: >-
    and(
      succeeded(),
      ne(variables['system.pullrequest.isfork'], true),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  displayName: Publish deployables artifacts

# push NuGet packages to Azure Artifacts feed (always happens except on PR builds)
- task: NuGetCommand@2
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  continueOnError: true
  displayName: Push NuGet packages to Azure Artifacts
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishFeedCredentials: 'AzureArtifacts-$(System.TeamProject)'
    allowPackageConflicts: true

# push NuGet class lib package to NuGet (always happens except on PR builds)
- task: NuGetCommand@2
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  continueOnError: true
  displayName: Push NuGet packages to NuGet
  inputs:
    command: push
    nuGetFeedType: external
    allowPackageConflicts: true
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishFeedCredentials: 'NuGet-$(System.TeamProject)'
